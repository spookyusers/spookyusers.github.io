# -*- coding: utf-8 -*-
"""database_elec_components.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19JDZ2pJCqJoz70uk8aX7ygXkb1Sc4tsM

# Create a SQLite3 database for component tracking
"""

# Kym, January 26 2023
# GPT guide link - https://chat.openai.com/share/1d104082-6b16-4621-bf23-118fa4009825
# Jan 26: Need to add other fields to the update function
  # Review update function and delete function for learning
  # View GPT guide link to add further functionality, including error handling
  # Probably should add a function to search components by keyword, or at least
    # to show a list of component types

#import SQLite database
import sqlite3

# Connect to SQLite database (or create it if it doesn't exist)
conn = sqlite3.connect('components.db')

# Create a cursor object using the cursor method
cursor = conn.cursor()

# Create schema
create_table_query = '''CREATE TABLE IF NOT EXISTS components(
                        ID INTEGER PRIMARY KEY AUTOINCREMENT,
                        ComponentType TEXT,
                        Value TEXT,
                        PackageType TEXT,
                        Quantity INTEGER,
                        PartNumber TEXT,
                        DatasheetLink TEXT,
                        Notes TEXT
                        );'''

# Execute the SQL command
cursor.execute(create_table_query)

# Commit the changes
conn.commit()

# Close the database connection
conn.close()

"""# Create a script for data entry"""

import sqlite3

# Create a function to add components
def add_component(component_type, value, package_type, quantity, part_number, datasheet_link, notes):

  # Connect to database
  conn = sqlite3.connect('components.db')
  cursor = conn.cursor()

  # SQL command to insert a new entry into the components table
  insert_query = '''INSERT INTO components (ComponentType, Value, PackageType, Quantity, PartNumber, DatasheetLink, Notes)
                    VALUES (?,?,?,?,?,?,?)'''

  # Execute the SQL command
  cursor.execute(insert_query, (component_type, value, package_type, quantity, part_number, datasheet_link, notes))

  # Commit the changes
  conn.commit()

  # Close the database connection
  conn.close()

# Example usage
add_component('Resistor', '220Î©', 'Through-hole', 10, 'R220-01', 'http://example.com/datasheet.pdf', 'High precision')

# real component that I have (still on salvaged TV circuit)

add_component(
    component_type='DC/DC Converter',
    value='0.95V / 3A',  # Combines voltage and current for the value field
    package_type='Unknown',  # Package type is not specified
    quantity=1,
    part_number='MSH6103A',
    datasheet_link='https://hisense.fr/download/serie/A7120F/guide-reparation.pdf',
      # shown on "power tree" section, page 48 of the link above
    notes='Used for CPU Power, controllable via PWR_ON/OFF'
)

"""# Build a function to query the database"""

# Function to query the database

import sqlite3

# Create the function
def query_components_by_type(component_type):

  # Connect to the SQLite database
  conn = sqlite3.connect('components.db')
  cursor = conn.cursor()

  #SQL command to query components of a specific type
  query = '''SELECT * FROM components WHERE ComponentType = ?;'''
                    # *: This symbol means "all columns." When used with SELECT,
                    # it tells the database to return every column for each row
                    # that matches the query. For example, if your table has
                    # columns for ID, ComponentType, Value, etc., using * will
                    # retrieve all of these fields.

  # Execute the SQL command
  cursor.execute(query, (component_type,))

  # Fetch all rows matching the query
  results = cursor.fetchall()

  # Close the database connection
  conn.close()

  return results

# Example usage
components = query_components_by_type('Resistor')
for component in components:
  print(component)

components = query_components_by_type('DC/DC Converter')
for component in components:
  print(component)

"""# Create an update function"""

import sqlite3

def update_component(id, component_type=None, value=None, package_type=None, quantity=None, part_number=None, datasheet_link=None, notes=None):
    conn = sqlite3.connect('components.db')
    cursor = conn.cursor()

    update_data = []
    query = "UPDATE components SET "

    if component_type:
        query += "ComponentType = ?, "
        update_data.append(component_type)
    if value:
        query += "Value = ?, "
        update_data.append(value)
    # Repeat for other fields...

    query = query.rstrip(", ")  # Remove the trailing comma
    query += " WHERE ID = ?;"
    update_data.append(id)

    cursor.execute(query, tuple(update_data))
    conn.commit()
    conn.close()

# Example usage
update_component(1, quantity=15, notes="Updated quantity and notes")

"""# Create a delete function"""

import sqlite3

def delete_component(id):
    conn = sqlite3.connect('components.db')
    cursor = conn.cursor()

    query = "DELETE FROM components WHERE ID = ?;"
    cursor.execute(query, (id,))

    conn.commit()
    conn.close()

# Example usage
delete_component(2)